// Config file for the using the graphslam-engine application
//
//              ~ The MRPT Library ~
//----------------------------------------------------------------------------

###############################################################
# Sat Jun 25 16:43:35 EEST 2016, Nikos Koukis, nickkouk@gmail.com
# Used, tested for the following specifications
# observations handled                          : CObservation2DRangeScan
# Produced map                                  : 2D
# Graph type                                    : mrpt::graphs::CNetworkOfPoses2DInf
# NodeRegistrationDecider tested                : CICPGoodnessNRD
# EdgeRegistrationDecider                       : CICPGoodnessERD
# GraphSlamSolver                               : CLevMarqGSO
# Datasets used                                 : MRPT_DIR/share/mrpt/datasets/graphslam-engine-demos/observation_only_map2/
# Notes                                         : Combination of NRD, ERD is slow due to the large number of edges
###############################################################

[GeneralConfiguration]

output_dir_fname = graphslam_results
user_decides_about_output_dir = false
save_3DScene = true
save_3DScene_fname = output_scene.3DScene
save_graph = true
save_graph_fname = output_graph.graph

; min node difference for an edge to be considered as a loop closure
; Used in both the visualization procedure for updating the Loop closures
; counter as well as the optimization procedure since it affects how often we
; otpimize the full graph
LC_min_nodeid_diff= 50
class_verbosity = 1

########################################################
[NodeRegistrationDeciderParameters]

registration_max_distance = 0.1 // meters
registration_max_angle = 8 // degrees

; number of ICP goodness values to consider for estimating the current ICP threshold
sliding_win_size = 3
; options:  mean, median
class_verbosity = 0


########################################################
[EdgeRegistrationDeciderParameters]

; Works on the 2D observation-only dataset
ICP_goodness_thresh = 0.50 // threshold for accepting the ICP constraint in the graph

; Either check ICP using distance OR node count from current node
ICP_max_distance =  5 // maximum distance for checking other nodes for ICP constraints
;ICP_max_distance =  -1 // check against all other nodes
class_verbosity = 0


[OptimizerParameters]

optimization_on_second_thread = false
optimization_distance = 3;

; Levenberg-Marquardt parameters
verbose = false
profiler = false
max_iterations = 100
scale_hessian = 0.2
tau = 1e-3
class_verbosity = 1

########################################################
# seems that it doesn't read hex, using cfg_file.read_int
# hardcode the integer values instead
# http://www.binaryhexconverter.com/hex-to-decimal-converter
[VisualizationParameters]

visualize_optimized_graph = 1

optimized_show_ID_labels = 0
optimized_show_ground_grid = 1
optimized_show_edges = 1
optimized_edge_color = 4278257152
optimized_edge_width = 0.5
optimized_show_node_corners = 1
optimized_show_edge_rel_poses = 0
optimized_edge_rel_poses_color = 1090486271
optimized_nodes_edges_corner_scale = 0.0
optimized_nodes_corner_scale = 0.1
optimized_nodes_point_size = 1
optimized_nodes_point_color = 1090486271

visualize_map = true
visualize_laser_scans = true
visualize_odometry_poses = true
visualize_ground_truth = true
visualize_estimated_trajectory = true

enable_curr_pos_viewport = true

[ICP]
maxIterations              = 100    // The maximum number of iterations to execute if convergence is not achieved before
minAbsStep_trans           = 1e-6  // If the correction in all translation coordinates (X,Y,Z) is below this threshold (in meters), iterations are terminated:
minAbsStep_rot             = 1e-6  // If the correction in all rotation coordinates (yaw,pitch,roll) is below this threshold (in radians), iterations are terminated:

thresholdDist              = 0.3   // Initial maximum distance for matching a pair of points
thresholdAng_DEG           = 5     // An angular factor (in degrees) to increase the matching distance for distant points.

ALFA                       = 0.8   // After convergence, the thresholds are multiplied by this constant and ICP keep running (provides finer matching)

smallestThresholdDist      = 0.05 // This is the smallest the distance threshold can become after stopping ICP and accepting the result.
onlyClosestCorrespondences = false // 1: Use the closest points only, 0: Use all the correspondences within the threshold (more robust sometimes, but slower)
doRANSAC                   = true

# 0: icpClassic
# 1: icpLevenbergMarquardt
ICP_algorithm              = icpLevenbergMarquardt
;ICP_algorithm              = icpClassic

# decimation to apply to the point cloud being registered against the map
# Reduce to "1" to obtain the best accuracy
corresponding_points_decimation = 10
